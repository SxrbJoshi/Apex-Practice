//Question 21 : Write a method to check if a Set of integers can be divided into two subsets with equal sum. ~ NOT COMPLETED
    //Input: Set<Integer> set = {1, 5, 11, 5};
    //Output: true
    public static void subSetsWithEqualSum() {
        List<Integer> input = new List<Integer>{1,5,11,5};
            Integer totalSum = 0;
        for(Integer i : input) {
            totalSum = totalSum + i;
        }
        //system.debug(totalSum);
        Integer halfSum = totalSum/2;
        for(Integer i = input.size() - 1; i > 0; i--) {
            if(input[i] == halfSum) {
                
            }
        }
    }
    
    //Question 20 :  Write a method to find the intersection of multiple Sets (List of Sets).
    //Input: List<Set<Integer>> sets = [{1, 2, 3}, {2, 3, 4}, {2, 3}];
    //Output: {2, 3}
    public static void intersectionOfSets() {
        List<Set<Integer>> input = new List<Set<Integer>>{new Set<Integer>{1,2,3}, new Set<Integer>{2,3,4}, new Set<Integer>{2,3}};
            Set<Integer> set1 = new Set<Integer>();
        Set<Integer> repeatedElements = new Set<Integer>();
            set1.addAll(input[0]);
        
        for (Integer i = 1; i < input.size(); i++) {
            set1.retainAll(input[i]); 
        }
        system.debug(set1);
    }
    
    //Question 31 : Write a method to find common elements across multiple Lists using Sets.
    public static void duplicatesInMultipleLists() {
        List<Integer> list1 = new List<Integer>{1, 2, 3};
            List<Integer> list2 = new List<Integer>{2, 3, 4};
                List<Integer> list3 = new List<Integer>{3, 4, 5};
                    Set<Integer> uniqueValues = new Set<Integer>();
        uniqueValues.addAll(list1);
        Set<Integer> newList = new Set<Integer>();
        for(Integer i : list2) {
            if(uniqueValues.contains(i)) {
                newList.add(i);
            }
            else {
                uniqueValues.add(i);
            }
        }
        for(Integer j : list3) {
            if(uniqueValues.contains(j)) {
                newList.add(j);
            }
            else {
                uniqueValues.add(j);
            }
        }
        system.debug(newList);
    }
    
    //Question 18 :  Find all unique triplets in a Set that add up to a specific target sum.
    //Input: Set<Integer> set = {1, 2, 3, 4, 5}; int target = 6;
    //Output: [(1, 2, 3)]
    public static void tagetSum(Integer target) {
        Set<Integer> inputSet = new Set<Integer>{1, 2, 3, 4, 5};
            Set<Integer> finalSet = new Set<Integer>();
            List<Integer> input = new List<Integer>();
        input.addAll(inputSet);
        for(Integer i = 0; i < input.size(); i++) {
            for(Integer j = i + 1; j < input.size(); j++) {
                for(Integer k = j + 1; k < input.size(); k++) {
                    Integer sum = input[i] + input[j] + input[k];
                    
                    if(sum == target) {
                        List<Integer> finalList = new List<Integer>{input[i], input[j], input[k]};
                            finalList.sort();
                        finalSet.addAll(finalList);
                            }
                }
            }
        }
        system.debug(finalSet);
    }
    
    //Question 21 :  Write a method to find all subsets of a Set.
    //Input : Set<Integer> set = {1, 2};
    //Output: [{}, {1}, {2}, {1, 2}]
    public static void powerSetMethod() {
        Set<Integer> inputSet = new Set<Integer>{1, 2};
            List<Set<Integer>> powerSet = new List<Set<Integer>>();
        powerSet.add(new Set<Integer>());
        for(Integer i : inputSet) {
            Integer n = powerSet.size();
            for(Integer j = 0; j < n; j++) {
                Set<Integer> newSet = new Set<Integer>(powerSet.get(j));
                    newSet.add(i);
                powerSet.add(newSet);
            }
        }
        system.debug(powerSet);
    }
    
    //Question 12 : Create a custom Map class where each key maps to a List of values.
    //Input: MultiMap.put('key1', 1); MultiMap.put('key1', 2);
    //Output: {'key1' => [1, 2]}
    public static void mapToListMap() {
        Map<String, Integer> multiMap1 = new Map<String, Integer>();
        Map<String, Integer> multiMap2 = new Map<String, Integer>();
        multiMap1.put('key1', 1);
        multiMap2.put('key1', 2);
        Map<String, List<Integer>> finalMap = new Map<String, List<Integer>>();
        List<Integer> iList = new List<Integer>();
        for(String s : multiMap1.KeySet()) {
            if(multiMap2.containsKey(s)) {
                iList.add(multiMap1.get(s));
                iList.add(multiMap2.get(s));
            }
        }
        system.debug(iList);
    }
    
    //Question 13 :  Write a method to sort a Map by its values in descending order.
    //Input: Map<String, Integer> map = {'A' => 3, 'B' => 1, 'C' => 2};
    //Output: {'A' => 3, 'C' => 2, 'B' => 1}
    public static void minimumValueFirst() {
        Map<String, Integer> inputMap = new Map<String, Integer>{'A' => 3, 'B' => 1, 'C' => 2};
            List<Integer> values = new List<Integer>();
            List<String> keys = new List<String>();
        for(String s : inputMap.KeySet()) {
            values.add(inputMap.get(s));
            keys.add(s);
        }
        values.sort();
        Map<String, Integer> finalMap = new Map<String, Integer>();
        for(Integer i = values.size() - 1; i >= 0; i--) {
            
    }
    }
    //Set~2
    //Question 25 :  Write a method to generate the power set of a Set recursively.
    //Input : Set<Integer> set = new Set<Integer>{1, 2};
    //Output: [{}, {1}, {2}, {1, 2}]
    public static void createPowerSet() {
        Set<Integer> inputSet = new Set<Integer>{1, 2};
            List<Set<Integer>> powerSet = new List<Set<Integer>>();
        powerSet.add(new Set<Integer>());
        for(Integer i : inputSet) {
            Integer n = powerSet.size();
            for(Integer j = 0; j < n; j++) {
                Set<Integer> newSet = new Set<Integer>(powerSet.get(j));
                    newSet.add(i);
                powerSet.add(newSet);
            }
        }
        system.debug(powerSet);
    }
    
    //Question 32 :  Write a merge sort algorithm for sorting a List of integers in ascending order.
    //Input: List<Integer> list = [3, 1, 4, 1, 5, 9];
    //Output: [1, 1, 3, 4, 5, 9]
    public static void sortList() {
        List<integer> input = new List<Integer>{3, 1, 4, 1, 5, 9};
            input.sort();
        system.debug(input);
    }
    
        

    //Question 6 : Given a List of integers, write a method to find the sublist (contiguous elements) with the largest sum.
    //Input : List<Integer> list = new List<Integer>{-2, 1,-3, 4,-1,2, 1,-5, 4};
    //Output: [4,-1, 2, 1]
    public static void subListWithLargestSum() {
        List<Integer> input = new List<Integer>{-2, 1, -3, 4, -1, 2, 1, -5, 4};
            Integer max = input[0];
            Integer startPoint = 0 ; 
            Integer endpoint = 0;
        for(Integer i = 0; i <= input.size(); i++) {
            Integer initialSum = 0;
            for(Integer j = i; j <= input.size(); i++) {
                initialSum = initialSum + input[j];
                if(initialSum > max) {
                    startPoint = i;
                    endPoint = j;
                }
            }
        }
        for(Integer i = startPoint; i <= endPoint; i++) {
            system.debug(input[i]);
        }
        system.debug('Maximum Sum is ' + max);
    }
    
    //Question 29 :  Write a method to generate the power set (all subsets) of a Set.
    //Input : Set<Integer> set = new Set<Integer>{1, 2};
    //Output: [{}, {1}, {2}, {1, 2}]
    public static void powerSets() {
        Set<Integer> inputSet = new Set<Integer>{1, 2};
            List<Set<Integer>> powerSet = new List<Set<Integer>>();
        powerSet.add(new Set<Integer>());
        for(Integer i : inputSet) {
            Integer n = powerSet.size();
            for(Integer j = 0; j < n; j++) {
                Set<Integer> newSet = new Set<Integer>(powerSet.get(j));
                    newSet.add(i);
                powerSet.add(newSet);
            }
        }
        system.debug(powerSet);
    }
