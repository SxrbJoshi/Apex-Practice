    //Question 22 :  Write a method that converts a Set of integers to a comma-separated string.
    //Input : Set<Integer> set = {1, 2, 3};
    //Output: "1,2,3"
    public static void setToString() {
        Set<Integer> input = new Set<Integer>();
        String s = String.join(input,',');
        system.debug(s);
    }
    
    //Question 27 :  For each element in the List, replace it with the product of all other elements without using division.
    //Input: List<Integer> list = [1, 2, 3, 4];
    //Output: [24, 12, 8, 6]
    public static void productOfElements() {
        List<Integer> input = new List<Integer>{1, 2, 3, 4};
        List<Integer> finalList = new List<Integer>(new Integer [input.size()]);
        List<Integer> left = new List<Integer>(new Integer [input.size()]);
        List<Integer> right = new List<Integer>(new Integer [input.size()]);
        
        left[0] = 1;
        right[input.size() - 1] = 1;
        
        for(Integer i = 1; i < input.size(); i++) {
            left[i] = left[i-1] * input[i-1];
        }
        
        for(Integer i = input.size() - 2; i >= 0; i--) {
            right[i] = right[i+1] * input[i+1];
        }
        
        for(Integer i = 0; i < input.size(); i++) {
            finalList[i] = left[i] * right[i];
        }
        
        system.debug(finalList);
    }
    
    //Question 8 :  Reverse every group of K consecutive elements in a List.
    //Input : List<Integer> list = new List<Integer>{1, 2, 3, 4, 5, 6}; int K = 2;
    //Output: [2, 1, 4, 3, 6, 5]
    public static void reverseConsecutive(Integer k) {
         List<Integer> input = new List<Integer>{1, 2, 3, 4, 5, 6};
             List<Integer> finalList = new List<Integer>();
             for(Integer i = 0; i < input.size(); i+=k) {
                 List<Integer> tempList = new List<Integer>();
                 for(Integer j = 0; j < k && i + j < input.size(); j++) {
                     tempList.add(input[i+j]);
                 }
                 for(Integer j = tempList.size() - 1; j >= 0; j--) {
                     finalList.add(tempList[j]);
                 }
             }
        system.debug(finalList);
    }
    
    //Question 10 :  Write a method that shuffles a List of integers randomly.
    //Input : List<Integer> list = new List<Integer>{1, 2, 3, 4, 5};
    public static void randomShuffle() {
        List<Integer> input = new List<Integer>{1, 2, 3, 4, 5};
        for (Integer i = 0; i < input.size(); i++) {
            Integer j = (Integer)(Math.random() * input.size()); 
            Integer temp = input[i];
            input[i] = input[j];
            input[j] = temp;
        }
        system.debug(input);
    }
    
    //Question 28 :  Given a List of integers, find the maximum sum of any contiguous subarray that has at most K elements.
    //Input: List<Integer> list = [4, 2, 1, 7, 8, 1, 2, 8, 1, 0];
    //K = 3;
    //Output: 16 (subarray [7, 8, 1])
    public static void contigiousElementsMaxSum(Integer K) {
        List<Integer> input = new List<Integer>{4, 2, 1, 7, 8, 1, 2, 8, 1, 0};
        Integer maxSum = 0;
        Integer sum = 0;
        Integer left = 0;
        for(Integer i = 0; i < input.size(); i++) {
            sum = sum + input[i];
            if(i - left + 1 > K) {
                sum = sum - input[left];
                left++;
            }
            maxSum = Math.max(maxSum, sum);
        }
        system.debug(maxSum);
    } 
    
    //Question 8 : Write a method that performs binary search on a sorted List of integers.
    //Input : List<Integer> list = new List<Integer>{1, 3, 5, 7, 9};
    //int target = 5;
    //Output: 2 (index of 5)
    public static void binarySearch() {
        List<Integer> input = new List<Integer>{1, 3, 5, 7, 9};
        Integer startPoint = 0;
        Integer endPoint = input.size() - 1;
        Integer target = 5;
        
        while(startPoint <= endPoint) {
            Integer mid = startPoint + (endPoint - startPoint)/2;
            if(input[mid] == target) {
                system.debug(mid);
                return;
            }
            else if (input[mid] > target) {
                endPoint = mid - 1;
            }
            else {
                startPoint = mid + 1;
            }
        }
        system.debug('Nothing');
    }
    
    //Question 30 :  Write a method to find the smallest contiguous subarray with a sum greater than a specified target.
    //Input: List<Integer> list = [1, 4, 45, 6, 0, 19]; int target = 51;
    //Output: 3 (subarray [4, 45, 6])
    public static void smallestContigiousSubList(Integer K) {
        List<Integer> input = new List<integer>{1, 4, 45, 6, 0, 19};
        Integer minLength = null;
        Integer sum = 0;
        Integer left = 0;
        for(Integer i = 0; i < input.size(); i++) {
            sum = sum + input[i];
            while(sum > K) {
                if(minLength == null || (i - left + 1) < minLength) {
                    minLength = i - left + 1;
                }
                sum = sum - input[left];
                left++;
            }
    }
        system.debug(minLength);
    }
    
    //Question 19 : Write a method to generate all unique combinations (not permutations) of a Set's elements.
    //Input: Set<Integer> set = {1, 2, 3};
    //Output: [[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]] 
    public static void uniquePermutations() {
        Set<Integer> inputSet = new Set<Integer>{1, 2, 3};
            List<Set<Integer>> powerSet = new List<Set<Integer>>();
        powerSet.add(new Set<Integer>());
        for(Integer i : inputSet) {
            Integer n = powerSet.size();
            for(Integer j = 0; j < n; j++) {
                Set<Integer> newSet = new Set<Integer>(powerSet.get(j));
                    newSet.add(i);
                powerSet.add(newSet);
            }
        }
        system.debug(powerSet);
    }
    
    //Question 10 :  Given a Map where each key is a document name and each value is a string of text, create an inverted index mapping each word to the documents it appears in.
    //Input: Map<String, String> docs = {'doc1' => 'hello world', 'doc2' => 'hello apex'};
    //Output: {'hello' => ['doc1', 'doc2'], 'world' => ['doc1'], 'apex' => ['doc2']}
    public static void docStringMap() {
     Map<String, String> inputDocs = new Map<String, String>{'doc1' => 'hello world', 'doc2' => 'hello apex'};
     Map<String, List<String>> finalMap = new Map<String, List<String>>();
        for(String doc : inputDocs.KeySet()) {
            String docName = inputDocs.get(doc);
            
            Set<String> words = new Set<String>();
            for(String word : docName.split(' ')) {
                word = word.trim();
                if(!String.isEmpty(word)) {
                    words.add(word);
                }
            }
            for (String word : words) {
                if (!finalMap.containsKey(word)) {
                    finalMap.put(word, new List<String>());
                }
                finalMap.get(word).add(docName);
            }
        }
        system.debug(finalMap);
    }
    
    //Question 11 :  Write a method to find the top K most frequently occurring values in a Map.
    //Input: Map<String, Integer> map = {'A' => 1, 'B' => 2, 'C' => 2, 'D' => 3}; int K = 2;
    //Output: [2, 1]
    public static void kMostFrequent(Integer K) {
        Map<String, Integer> inputMap = new Map<String, Integer>{'A' => 1, 'B' => 2, 'C' => 2, 'D' => 3};
        Map<Integer, Integer> freqMap = new Map<Integer, Integer>();
        for(Integer i : inputMap.values()) {
            if(freqMap.containsKey(i)) {
                freqMap.put(i, freqMap.get(i) + 1);
            }
            else {
                freqMap.put(i, 1);
            }
        } 
        List<Integer> frequencies = new List<integer>(freqMap.KeySet());
        Integer n = frequencies.size();
        for (Integer i = 0; i < n - 1; i++) {
            Integer maxIndex = i;
            for (Integer j = i + 1; j < n; j++) {
                if (freqMap.get(frequencies[j]) > freqMap.get(frequencies[maxIndex])) {
                    maxIndex = j;
                }
            }
            Integer temp = frequencies[i];
            frequencies[i] = frequencies[maxIndex];
            frequencies[maxIndex] = temp;
        }
        List<Integer> KFrequent = new List<Integer>();
        for (Integer i = 0; i < K; i++) {
            if (i < frequencies.size()) {
                KFrequent.add(frequencies[i]);
            }
            }
        system.debug(KFrequent);
    }
    
    //Question 5 : Write a method to sort a List of strings by their lengths in ascending order.
    //Input : List<String> list = new List<String>{'apple', 'fig', 'banana'};
    //Output: ['fig', 'apple', 'banana']
    public static void sortStringByLength() {
        List<String> input = new List<String>{'apple', 'fig', 'banana'};
            for(Integer i = 0; i < input.size() ; i++) {
                for(Integer j = 0; j < input.size() - i - 1; j++) {
                    if (input[j].length() > input[j + 1].length()) {
                        String temp = input[j];
                        input[j] = input[j + 1];
                        input[j + 1] = temp;
                    }
                }
            }
        system.debug(input);
    }
    
    //Question 13 :  Write a method to sort a Map by its values in descending order.
    //Input: Map<String, Integer> map = {'A' => 3, 'B' => 1, 'C' => 2};
    //Output: {'A' => 3, 'C' => 2, 'B' => 1}
    public static void descMap() {
        Map<String, Integer> inputMap = new Map<String, Integer>{'A' => 3, 'B' => 1, 'C' => 2};
        
        Map<Integer, String> middleMap = new Map<Integer, String>();
        
        Map<String, Integer> finalMap = new Map<String, Integer>();
        
        List<Integer> values = new List<Integer>();
        
        for(Integer i : inputMap.values()) {
            values.add(i);
        }
        
        values.sort();
        
        Integer startPoint = 0;
        
        Integer endPoint = values.size() - 1;
        
        while(startPoint < endPoint) {
            Integer temp = values[startPoint];
            values[startPoint] = values[endPoint];
            values[endPoint] = temp;
            startPoint++;
            endPoint--;
        }
        
        system.debug(values);
        
        for(String s : inputMap.KeySet()) {
            middleMap.put(inputMap.get(s), s);
        }
        system.debug(middleMap);
        
        for(Integer i : values) {
            if(middleMap.containsKey(i)) {
                finalMap.put(middleMap.get(i), i);
            }
        } 
        system.debug(finalMap);
    }
