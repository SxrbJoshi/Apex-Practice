public class Oct28_2024 {
    
    //Question 1
    public static Integer medianOfList() {
        List<Integer> input = new List<Integer>{3, 1, 2, 5, 4};
        Integer i = 0;
        for(Integer j : input) {
            i = i + j;
        }
        return i/input.size();
    }
    //Question 2
    public static void addZeroAtEnd() {
        List<Integer> input = new List<Integer>{1,0,2,0,3};
        List<Integer> newList = new List<Integer>();
        Integer x = 0;
        for(Integer num : input) {
            if(num == 0) {
                x++;
            }
            else {
                newList.add(num);
            }
        }
        for(Integer i = 0; i < x; i++) {
            newList.add(0);
        }
        system.debug(newList);
    }
    
    //Question 3
    public static void reverseList() {
        List<Integer> input = new List<Integer>{1,2,3,4,3,2,1};
        List<Integer> reverse = new List<Integer>();
        Boolean check = true;
        for(Integer i = input.size() - 1; i >= 0; i--) {
            reverse.add(input[i]);
        }
        for(Integer i = 0; i < input.size(); i++) {
            if(reverse[i] != input[i]) {
                check = false;
            }
        }
        if(check == true) {
            system.debug('The List is palindrome');
        }
        else {
            system.debug('The List is not palindrome');
        }
    }
    
    //Question 9
    public static void countList() {
         List<Integer> input = new List<Integer>{1, 2, 2, 3};
         Integer x = 0;
        for(Integer i : input) {
            x = x + i;
        }
        system.debug(x);
    }
    
    //Question 10 ~ Not Completed
    public static void done() {
        List<Integer> input = new List<Integer>{4, 5, 2, 10, 8};
            for(Integer i = 0; i < input.size() - 1; i++) {
                if(input[i] == input[i + 1]) {
                    input.add(i, input[i + 1]);
                }
            }
        system.debug(input);
    }
    
    //Question 6
    public static void pairWithSameDiff(List<Integer> nums, Integer difference) {
        Set<Integer> numSet = new Set<Integer>(nums);
        List<List<Integer>> result = new List<List<Integer>>();
        for (Integer num : nums) {
            if (numSet.contains(num + difference)) {
                result.add(new List<Integer>{num, num + difference});
            }
        }
        system.debug(result);
    }
    
    //Question 11 Not Complete
    public static void mapWithGreaterValue() { 
        Map<String, Integer> map1 = new Map<String, Integer>();
        map1.put('A', 1);
        map1.put('B', 2);
        List<Integer> map1List = new List<Integer>();
        
        Map<String, Integer> map2 = new Map<String, Integer>();
        map2.put('A', 4);
        map2.put('B', 1);
        List<Integer> map2List = new List<Integer>();
        
        for(String s : map1.KeySet()) {
            if(map2.containsKey(s)) {
                map1List.add(map1.get(s));
                map2List.add(map2.get(s));
                
                for(Integer i = 0; i < map1List.size(); i++) {
                    if(map1List[i] > map2List[i]) {
                        system.debug(s);
                    }
                }
            }
        }
    }
}

//Question 5 : Write a method that returns the Kth largest element in a List of integers.
    public static void kthLargest(Integer k) {
        List<Integer> input = new List<Integer>{5, 2, 9, 7, 3};
        input.sort();
        system.debug(input[k-1]);   
    }
    
    //Question 6 : Given a List of integers, write a method to find the sublist (contiguous elements) with the largest sum.
    public static void subListMaxSum() {
        List<Integer> input = new List<Integer>{-2, 1,-3, 4,-1,2, 1,-5, 4};
            Set<integer> set1 = new Set<Integer>();
            for(Integer i = 0; i < input.size(); i++) {
                for(Integer j = 0; j < input.size(); j++) {
                    if(input[i] < input[j]) {
                        set1.add(input[i]);
                    } else {
                        set1.add(input[i]);
                    }
                }
            }
            system.debug(set1);
    }
    
    //Question 8
    public static void reverseConsecutive(Integer k) {
         List<Integer> input = new List<Integer>{1, 2, 3, 4, 5, 6};
             List<Integer> finalList = new List<Integer>();
             for(Integer i = 0; i < input.size(); i+k) {
                 for(Integer j = k; j < input.size(); j++) {
                     finalList.add(input[j]);
                 }
             }
        system.debug(finalList);
    }

    //Question 12 
    public static void mostFrequentInMap() {
        List<Integer> input = new List<Integer>{1, 2, 2, 3, 3, 3};
        Map<Integer, Integer> frequencyMap = new Map<Integer, Integer>();
        Integer f = 0;
        Integer e = 0;
        
        for(Integer i : input) {
            if(frequencyMap.containsKey(i)) {
                frequencyMap.put(i, frequencyMap.get(i) + 1);
            }
            else {
                frequencyMap.put(i, 1);
            }
        }
        for(Integer key : frequencyMap.KeySet()) {
            Integer j = frequencyMap.get(key);
            if(j > f) {
                f = j;
                e = key;
            }
        }
        system.debug(e);
    }

//Question 9 : Write a method that checks if a List contains another List as a sublist.
    public static void listSubList() {
        List<Integer> input = new List<Integer>{1, 2, 3, 4, 5};
        List<Integer> sublist = new List<Integer>{3, 4};
            
        Set<Integer> set1 = new Set<Integer>();
        set1.addAll(input);
        List<Integer> aList = new List<Integer>();
        for(Integer i : subList) {
            if(set1.contains(i)) {
                aList.add(i);
            }
        }
        if(subList.equals(aList)) {
            system.debug('True');
        }
    }
    
    //Question 17 : Write a method to count the number of occurrences of each character in a string using a Map.
    public static void countCharacter(String s) {
        Map<String, Integer> alphaCount = new Map<String, Integer>();
        
        for(Integer i = 0; i < s.length(); i++) {
            string c = String.valueOf(s.charAt(i));
            system.debug(c);
            if(alphaCount.containsKey(c)) {
                alphaCount.put(c, alphaCount.get(c) + 1);
            }
            else {
                alphaCount.put(c, 1);
            }
        }
        system.debug(alphaCount);
    }
    
    //Question 28 :  Write a method to find the symmetric difference (elements not in both sets) of two Sets.
    public static void symmetricDiff() {
        Set<Integer> set1 = new Set<Integer>{1, 2, 3};
        Set<Integer> set2 = new Set<Integer>{3, 4};
        Set<Integer> finalSet = new Set<Integer>();
            for(Integer i : set1) {
                if(!set2.contains(i)) {
                    finalSet.add(i);
                }
            }
        for(Integer i : set2) {
            if(!set1.contains(i)) {
                finalSet.add(i);
            }
        }
        system.debug(finalSet);
    }
    
    //Question 30 : Write a method that checks if a List contains any duplicates using a Set.
    public static void setDuplicates() {
         List<Integer> input = new List<Integer>{1, 2, 3, 2};
         Set<Integer> set1 = new Set<Integer>();         
        for(Integer i : input) {
            if(!set1.contains(i)) {
                set1.add(i);
            }
            else {
                system.debug('True');
            }
        }
    }
    
    //Question 33 :  Given a List of Maps, merge them into a single Map.
    //               Input:
    //               List<Map<String, Integer>> list = new List<Map<String,
    //               Integer>>{new Map<String, Integer>{'A' => 1}, new
    //               Map<String, Integer>{'B' => 2}};
    public static void ListMapToMap() {
        List<Map<String, Integer>> listOfMaps = new List<Map<String, Integer>>();
        Map<String, Integer> map1 = new Map<String, Integer>();
        Map<String, Integer> map2 = new Map<String, Integer>();
        map1.put('A', 1);
        map2.put('B', 1);
        
        listOfMaps.add(map1);
        listOfMaps.add(map2);
        Map<String, Integer> finalMap = new Map<String, Integer>();
        for(Map<String, Integer> i : listOfMaps) {
            for(String s : i.KeySet()) {
                if(!finalMap.containsKey(s)) {
                    finalMap.put(s, i.get(s));
                }
            }
        }
        system.debug(finalMap);
    }
    
    //Question 34 :  Write a method that flattens a List of Lists into a single List.
    public static void listNewList() {
        List<List<Integer>> input = new List<List<Integer>>{new List<Integer>{1, 2}, new List<Integer>{3, 4}};
                List<Integer> finalList = new List<Integer>();
        for(List<Integer> iL : input) {
            for(Integer i : iL) {
                finalList.add(i);
            }
        }
        system.debug(finalList);
    }

//Question 31 : Write a method to find common elements across multiple Lists using Sets.
    public static void commonInLists() {
        List<Integer> list1 = new List<Integer>{1, 2, 3};
            List<Integer> list2 = new List<Integer>{2, 3, 4};
                List<Integer> list3 = new List<Integer>{3, 4, 5};
                    
                    Set<Integer> set1 = new Set<Integer>();
        Set<Integer> set2 = new Set<Integer>();
        Set<Integer> set3 = new Set<Integer>();
        set1.addAll(list1);
        set2.addAll(list2);
        set3.addAll(list3);
        
        set1.retainAll(set2);
        set1.retainAll(set3);
        system.debug(set1);
    }
    
    //Question 32 :  Group elements of a List by their frequency and return the elements sorted by their occurrence count using a Map.
    public static void frequencyAndOccurence() {
        List<Integer> input = new List<Integer>{1,2,2,3,3,3,3};
            Map<Integer, Integer> map1 = new Map<Integer, Integer>();
        for(Integer i : input) {
            if(map1.containsKey(i)) {
                map1.put(i, map1.get(i) + 1);
            }
            else {
                map1.put(i, 1);
            }
        }
        List<Integer> finalList = new List<Integer>();
        for(Integer i : map1.KeySet()) {
            finalList.add(i);
        }
        finalList.sort();
        List<integer> fList = new List<integer>();
        for(Integer i = finalList.size() - 1; i >= 0; i--){
            fList.add(finalList[i]);
        }
        system.debug(fList);
    }
    
    //Question 35 :  Write a method that returns the element with the maximum frequency in a List using a Map.
    public static void elementWithMaxFreq() {
         List<Integer> input = new List<Integer>{1, 2, 2, 3, 3, 3};
             Map<Integer, Integer> map1 = new Map<Integer, Integer>();
        for(Integer i : input) {
            if(map1.containsKey(i)) {
                map1.put(i, map1.get(i) + 1);
            }
            else {
                map1.put(i, 1);
            }
        }
        //system.debug('Map : ' + map1);
        
        List<Integer> finalList = new List<Integer>();
        for(Integer i : map1.KeySet()) {
                finalList.add(i);
        }
        //system.debug('Final List : ' + finalList);
        system.debug('Frequency : ' + finalList[finalList.size()-1]);
    }
    
    //Question 36 : Write a method that converts a List of custom objects into a Map where the key is a field of the object.
    public static void listFromMap() {
        List<Account> accounts = [SELECT Id, Name FROM Account LIMIT 2];
        Map<Id, Account> accountMap = new Map<Id, Account>();
        for(Account acc : accounts) {
            accountMap.put(acc.Id, acc);
        }
        system.debug(accountMap);
    }
    
    //Question 37 : Write a method that finds elements in one List that are missing from another List using a Set.
    public static void missingFromList() {
        List<Integer> list1 = new List<Integer>{1, 2, 3};
            List<Integer> list2 = new List<Integer>{2, 3, 4};
                Set<Integer> set1 = new Set<Integer>();
        List<Integer> finalList = new List<Integer>();
        set1.addAll(list2);
        for(Integer i : list1) {
            if(!set1.contains(i)) {
                finalList.add(i);
            }
        }
        system.debug(finalList);
    }
    
    //Question 38 : Write a method to filter a Map's entries based on a condition applied to the values.
    public static void filteredMap() {
        Map<String, Integer> inputMap = new Map<String, Integer>{'A' => 1, 'B' => 3};
            String key;
        Integer value;
        for(String s : inputMap.KeySet()) {
            if(inputMap.get(s) > 2) {
                system.debug(s + ' => ' + inputMap.get(s));
            }
        }
    }
    
    //Question 39 : Write a method that groups a List of strings by the length of each string using a Map.
    
    //Question 40 : Write a method that finds the first non-repeated element in a List of integers using a Map.
    public static void nonRepeatedElement() {
         List<Integer> input = new List<Integer>{1, 2, 2, 3, 3, 4, 4};
        Map<Integer, Integer> inputMap = new Map<Integer, Integer>();
        for(Integer i : input) {
            if(inputMap.containsKey(i)) {
                inputMap.put(i, inputMap.get(i) + 1);
            }
            else {
                inputMap.put(i, 1);
            }
        }
        List<Integer> finalList = new List<Integer>();
        for(Integer j : inputMap.KeySet()) {
            if(inputMap.get(j) == 1) {
                finalList.add(j);
            }
        }
        system.debug(finalList);
    }
    
    //Question 42 : Write a method to check if the numbers in a List form a geometric progression using a Set.
    public static void geometricProgression() {
        List<Integer> input = new List<Integer>{2, 4, 8};
            Boolean check = false;
            for(Integer i = input.size()-1; i > 0; i--) {
                if(input[i] == input[i-1] * 2) {
                    check = true;
                }
            }
        if(check) {
            system.debug('True');
        }
        else {
            system.debug('False');
        }
    }
    
    //Question 18 :  Given a List, return the N most frequent elements using a Map.
    public static void nMostFreq() {
        List<Integer> input = new List<Integer>{1, 2, 2, 3, 3, 3};
            Map<Integer, Integer> newMap = new Map<Integer, Integer>();
        for(Integer i : input) {
            if(newMap.containsKey(i)) {
                newMap.put(i, newMap.get(i) + 1);
            }
               else {
                   newMap.put(i, 1);
               }
        }
        List<Integer> occList = new List<Integer>();
        for(Integer i : newMap.keySet()) {
            if(newMap.containsKey(i)) {
                occList.add(newmap.get(i));
            }
        }
        occList.sort();
        List<Integer> iList = new List<Integer>();
        for(Integer i = occList.size()-1; i > 0; i--) {
            if(occList[i] > occList[i-1]) {
                iList.add(occList[i]);
            }
        }
        system.debug(iList);
    }
    
    //Question 39 : Write a method that groups a List of strings by the length of each string using a Map.
    public static void abc() {
        List<String> list1 = new List<String>{'apple', 'banana', 'pear', 'fig'};
        Map<Integer, String> newMap = new Map<Integer, String>();
        for(String s : list1) {
            Integer length = s.length();
            newMap.put(length, s);
        }
        system.debug(newMap);
    }
    
    //Question 45 : Write a method that checks if two Lists have no elements in common using a Set.
    public static void disJoint() {
        List<Integer> list1 = new List<Integer>{1, 2, 3};
            List<Integer> list2 = new List<Integer>{3, 5, 6};
                Set<Integer> Set1 = new Set<Integer>();
        List<Integer> finalList = new List<Integer>();
        set1.addAll(list2);
        Boolean check = false;
        for(Integer i : list1) {
            if(!set1.contains(i)) {
                finalList.add(i);
            }
        }
        if(!finalList.isEmpty()) {
            system.debug('False');
        }
        else {
            system.debug('True');
        }
                }
    
    //Question 15 : Given two Maps, find keys present in one Map but not the other.
    public static void findKeys() {
        Map<String, Integer> inputMap1 = new Map<String, Integer>();
        Map<String, Integer> inputMap2 = new Map<String, Integer>();
        inputMap1.put('A', 1);
        inputMap1.put('B', 2);
        inputMap2.put('B', 2);
        inputMap2.put('C', 3);
        List<String> iList = new List<String>();
        for(String s : inputMap1.KeySet()) {
            if(!inputMap2.containsKey(s)) {
                iList.add(s);
            }
        }
        
        for(String s : inputMap2.KeySet()) {
            if(!inputMap1.containsKey(s)) {
                iList.add(s);
            }
        }
        system.debug(iList);
    }
